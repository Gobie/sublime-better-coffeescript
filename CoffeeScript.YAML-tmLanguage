# [PackageDev] target_format: plist, ext: tmLanguage
comment: 'CoffeeScript Syntax: version 1'
name: CoffeeScript
scopeName: source.coffee
fileTypes: [coffee, Cakefile, coffee.erb, cson]

patterns:
- include: '#coffeescript'

repository:
  coffeescript:
    patterns:
    - include: '#whitespace'

    - name: meta.class.instance.constructor
      match: (new)\s+(\w+(?:\.\w*)*)
      captures:
        '1': {name: keyword.operator.new.coffee}
        '2': {name: support.class.custom.coffee}

    - name: string.quoted.triple.single.coffee
      begin: "'''"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: "'''"
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - include: '#whitespace'

    - name: string.quoted.triple.double.coffee
      begin: '"""'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: '"""'
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\.
      - include: '#whitespace'
      - include: '#interpolated_coffee'

    - name: string.quoted.other.script.coffee
      begin: '`'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: '`'
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
      - name: storage.type.annotation.coffee
        match: '@\w*'
      - include: '#annotation_type'

    - name: comment.block.coffee
      begin: (?<!#)###(?!#)
      end: '###(?:[ \t]*\n)'
      captures:
        '0': {name: punctuation.definition.comment.coffee}
      patterns:
      - name: storage.type.annotation.keyword.coffee
        match: '@\w*'
      - include: '#annotation_type'

    - name: comment.line.number-sign.coffee
      match: (#)(?!\{).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.coffee}

    - name: string.regexp.coffee
      begin: /{3}
      beginCaptures:
        '1': {name: punctuation.definition.regexp.start.coffee}
      end: (/{3})([imgy]{0,4})
      endCaptures:
        '1': {name: punctuation.definition.regexp.end.coffee}
        '2': {name: keyword.other.option-toggle.regexp.coffee}
      patterns:
      - include: '#interpolated_coffee'
      - include: '#embedded_comment'
      - include: '#regexp_inner'

    - include: '#regexp'

    - name: keyword.control.coffee
      match: (?x)\b(?<![\.\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|(?<=for)\s+own)(?!\s*:)\b

    - include: '#keyword_operator'

    - name: meta.variable.assignment.destructured.coffee
      begin: (?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])
      beginCaptures:
        '0': {name: keyword.operator.coffee}
      end: ([\]\}]\s*[:=])
      endCaptures:
        '0': {name: keyword.operator.coffee}
      patterns:
      - include: '#variable_name'
      - include: '#instance_variable'
      - include: '#single_quoted_string'
      - include: '#double_quoted_string'
      - include: '#numeric'

    - name: meta.function.coffee
      begin: (?xm)\s*([a-zA-Z\$_@][\.\w\$]*)\s*([:=])\s*(\()(?=[^()]*(?<re>\((?:(?>[^()]+)|\g<re>)*\))?[^()]*\)\s*[=-]>)
      beginCaptures:
        '1': {name: entity.name.function.coffee}
        '2': {name: keyword.operator.coffee}
        '3': {name: variable.parameter.function.coffee}
      end: (\))\s*([=-]>)
      endCaptures:
        '1': {name: variable.parameter.function.coffee}
        '2': {name: storage.type.function.coffee}
      patterns:
      - include: '#coffeescript'

    - name: meta.function.coffee
      match: (?xm)\s*([a-zA-Z\$_@][\.\w\$]*)\s*([:=])\s*([=-]>)
      captures:
        '1': {name: entity.name.function.coffee}
        '2': {name: keyword.operator.coffee}
        '3': {name: storage.type.function.coffee}

    - name: meta.function.inline.coffee
      begin: (?xm)\s*(\()(?=[^()]*(?<re>\((?:(?>[^()]+)|\g<re>)*\))?[^()]*\)\s*[=-]>)
      beginCaptures:
        '1': {name: variable.parameter.function.coffee}
      end: (\))\s*([=-]>)
      endCaptures:
        '1': {name: variable.parameter.function.coffee}
        '2': {name: storage.type.function.coffee}
      patterns:
      - include: '#coffeescript'

    - name: meta.variable.assignment.object.coffee
      match: (@?[a-zA-Z\$_]\w*(?:\.\w+)*)(?=\s*:(?!:))
      captures:
        '1': {name: variable.other.object_key.name.coffee}

    - name: meta.variable.assignment.object.coffee
      match: ((?<=\.)[a-zA-Z\$_]\w*(?:\.\w+)*)(?=\s*=(?![=]))
      captures:
        '1': {name: variable.other.object_key.name.coffee}

    - comment: Show well-known functions from Express and Mocha in Go To Symbol view
      name: meta.function.symbols.coffee
      begin: ^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]
      end: $
      patterns:
      - include: $self

    - name: storage.type.function.coffee
      match: '[=-]>'

    - include: '#constant_true'
    - include: '#constant_false'
    - include: '#constant_null'
    - include: '#constant_rest'

    - name: variable.language.coffee
      match: \b(?<!\.)(extends)(?!\s*[:=])\b

    - name: meta.class.coffee
      match: (?<!\.)(class\b)\s+(@?[a-zA-Z\$_][\w\.]*)?(?:\s+(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?
      captures:
        '1': {name: storage.type.class.coffee}
        '2': {name: entity.name.type.class.coffee}
        '3': {name: keyword.control.inheritance.coffee}
        '4': {name: entity.other.inherited-class.coffee}

    - name: keyword.other.coffee
      match: \b(debugger|arguments|\\)\b

    - include: '#native_class'

    - name: support.function.coffee
      match: (?x)\b(decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|(set|clear)Timeout)\b

    - name: support.function.method.event.coffee
      match: (?x)((?<=\.)(preventDefault|stopPropagation|stopImmediatePropagation))\b(?=\()

    - name: support.function.method.array.coffee
      match: (?x)((?<=\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(
        Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\b(?=[(\s])

    - name: support.function.console.coffee
      match: ((?<=console\.)(assert|clear|count|debug|dir|dirxml|error|group|groupCollapsed|groupEnd|info|log|profile|profileEnd|time|timeEnd|timeline|timelineEnd|timeStampt|trace|warn))\b

    - name: support.function.static.array.coffee
      match: (?x)((?<=Array\.)(isArray))\b

    - name: support.function.static.object.coffee
      match: (?x)((?<=Object\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\b

    - name: support.function.static.math.coffee
      match: (?x)((?<=Math\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\b

    - name: support.function.static.number.coffee
      match: (?x)((?<=Number\.)(is(Finite|Integer|NaN)|toInteger))\b

    - name: support.function.static.json.coffee
      match: (?x)((?<=JSON\.)(parse|stringify))\b

    - name: punctuation.terminator.statement.coffee
      match: \;

    - name: meta.delimiter.object.comma.coffee
      match: ',[ |\t]*'

    - name: meta.delimiter.method.period.coffee
      match: \.

    - name: meta.brace.curly.coffee
      match: \{|\}

    - name: meta.brace.round.coffee
      match: \(|\)

    - name: meta.brace.square.coffee
      match: \[|\]\s*

    - include: '#class_usage'
    - include: '#instance_variable'
    - include: '#instance_method'

    - include: '#an_library'
    - include: '#builder_library'
    - include: '#este_library'
    - include: '#google_closure_library'
    - include: '#highcharts_library'

    - include: '#single_quoted_string'
    - include: '#double_quoted_string'

    - include: '#numeric'

  an_library:
    patterns:
    - name: support.other.variable.user.an.coffee
      match: (?<!\w)an(\.\w+)+

  builder_library:
    patterns:
    - name: support.other.variable.user.builder.coffee
      match: (?<!\w)builder(\.\w+)+

  este_library:
    patterns:
    - name: support.other.variable.vendor.este.coffee
      match: (?<!\w)este(\.\w+)+

  google_closure_library:
    patterns:
    - name: support.other.variable.vendor.goog.coffee
      match: (?<!\w)goog(\.\w+)+

  highcharts_library:
    patterns:
    - name: support.other.variable.vendor.highcharts.coffee
      match: (?<!\w)Highcharts(\.\w+)+

  class_usage:
    patterns:
    - name: entity.name.type.class.usage.coffee
      match: (?x)(?<!\.)\b[A-Z]\w*(?=(\.\w+)+)

  double_quoted_string:
    patterns:
    - name: string.quoted.double.coffee
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
      - include: '#interpolated_coffee'

  embedded_comment:
    patterns:
    - name: comment.line.number-sign.coffee
      match: (?<!\\)(#).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.coffee}

  instance_method:
    patterns:
    - name: variable.other.method.instance.coffee
      match: (?x)(@|this\.)([a-zA-Z_\$]\w*)?(?=\s+|[?(])

  instance_variable:
    patterns:
    - name: variable.other.readwrite.instance.coffee
      match: (?x)(@|this\.)([a-zA-Z_\$]\w*)?(?=\??([\]\[.)\n]|(\s+(and|else|if|instanceof|in|is|isnt|not|or|then|unless|when)\b|\s*(==|=(?!>)|\?=|[#,}]))))

  interpolated_coffee:
    patterns:
    - name: source.coffee.embedded.source
      begin: \#\{
      end: \}
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      patterns:
      - include: $self
    - name: source.coffee.embedded.source
      begin: <%
      end: '%>'
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      patterns:
      - include: $self

  numeric:
    patterns:
    - name: constant.numeric.coffee
      match: (?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b

  single_quoted_string:
    patterns:
    - name: string.quoted.single.coffee
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: "'"
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)

  variable_name:
    patterns:
    - name: variable.other.name.coffee
      match: ([a-zA-Z\$_]\w*(\.\w+)*)(?!\()

  whitespace:
    patterns:
    - name: meta.whitespace.leading
      match: ^[\s\t]+
    - name: meta.whitespace.trailing
      match: '[\s\t]+$'
    - name: meta.whitespace
      match: '[\s\t]+'

  annotation_type:
    patterns:
    - name: meta.storage.type.annotation.type.coffee
      begin: "{"
      beginCaptures:
        '0': {name: punctuation.definition.annotation.type.begin.coffee}
      end: "}"
      endCaptures:
        '0': {name: punctuation.definition.annotation.type.end.coffee}
      patterns:
      - include: '#an_library'
      - include: '#builder_library'
      - include: '#este_library'
      - include: '#google_closure_library'
      - include: '#highcharts_library'
      - include: '#constant_true'
      - include: '#constant_false'
      - include: '#constant_null'
      - include: '#constant_rest'
      - include: '#annotation_definition'
      - include: '#keyword_operator'
      - include: '#whitespace'
      - name: storage.type.annotation.type.coffee
        match: '\w+'

  annotation_definition:
    patterns:
    - name: storage.type.annotation.types.coffee
      match: (?x)\b(string|boolean|number|Element|Node)\b
    - name: storage.type.annotation.keywords.coffee
      match: (?x)\b(function|new|this)\b
    - include: '#native_class'

  native_class:
    patterns:
    - name: support.class.native.coffee
      match: (?x)\b(Array|ArrayBuffer|Blob|Boolean|Date|document|event|Float(32|64)Array|Function|Int(8|16|32|64)Array|JSON|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest|Symbol)\b

  keyword_operator:
    patterns:
    - name: keyword.operator.coffee
      match: (?x)and=|or=|!|%|&|\^|\*|\/|(\-)?\-(?!>)|\+\+|\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\.\.(\.)?|\?|\||\|\||\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|\^=|\b(?<![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)(?![:])\b

  constant_true:
    patterns:
    - name: constant.language.boolean.true.coffee
      match: \b(?<!\.)(true|on|yes)(?!\s*[:=])\b

  constant_false:
    patterns:
    - name: constant.language.boolean.false.coffee
      match: \b(?<!\.)(false|off|no)(?!\s*[:=])\b

  constant_null:
    patterns:
    - name: constant.language.null.coffee
      match: \b(?<!\.)null(?!\s*[:=])\b

  constant_rest:
    patterns:
    - name: constant.language.coffee
      match: \b(Infinity|NaN|undefined)\b

  regexp:
    patterns:
    - begin: /(?![\s=/*+{}?])(?=.*?([^\\\n]|\\\\)/[igmy]{0,4}(?![a-zA-Z0-9]))
      beginCaptures:
        '1': {name: punctuation.definition.regexp.start.coffee}
      end: (/)([imgy]{0,4})
      endCaptures:
        '1': {name: punctuation.definition.regexp.end.coffee}
        '2': {name: keyword.other.option-toggle.regexp.coffee}
      name: string.regexp.coffee
      patterns:
      - include: '#regexp_inner'

  regexp_inner:
    patterns:
    - {match: '\\[bBAZzG]|\^|\$', name: keyword.control.anchor.regexp.coffee}
    - {match: '\\[1-9][0-9]?', name: keyword.other.back-reference.regexp.coffee}
    - {match: '[?+*][?+]?|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??', name: keyword.operator.quantifier.regexp.coffee}
    - {match: \|, name: keyword.operator.or.regexp.coffee}
    - {begin: '\(\?\#', end: \), name: comment.block.regexp.coffee}
    - {match: '(?<=^|\s)#\s[[a-zA-Z0-9,. \t?!-:][^\x{00}-\x{7F}]]*$', name: comment.line.number-sign.regexp.coffee}
    - {match: '(\()(\?P=([a-zA-Z_][a-zA-Z_0-9]*\w*))(\))', name: keyword.other.back-reference.named.regexp.coffee}
    - begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!))
      beginCaptures:
        '1': {name: punctuation.definition.group.regexp.coffee}
        '2': {name: punctuation.definition.group.assertion.regexp.coffee}
        '3': {name: meta.assertion.look-ahead.regexp.coffee}
        '4': {name: meta.assertion.negative-look-ahead.regexp.coffee}
        '5': {name: meta.assertion.look-behind.regexp.coffee}
        '6': {name: meta.assertion.negative-look-behind.regexp.coffee}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.group.regexp.coffee}
      name: meta.group.assertion.regexp.coffee
      patterns:
      - {include: '#regexp_inner'}
    - begin: (\()(\?\(([1-9][0-9]?|[a-zA-Z_][a-zA-Z_0-9]*)\))
      beginCaptures:
        '1': {name: punctuation.definition.group.regexp.coffee}
        '2': {name: punctuation.definition.group.assertion.conditional.regexp.coffee}
        '3': {name: entity.name.section.back-reference.regexp.coffee}
      end: (\))
      name: meta.group.assertion.conditional.regexp.coffee
      patterns:
      - {include: '#regexp_inner'}
    - begin: (\()((\?P<)([a-z]\w*)(>)|(\?:))?
      beginCaptures:
        '1': {name: punctuation.definition.group.regexp.coffee}
        '3': {name: punctuation.definition.group.capture.regexp.coffee}
        '4': {name: entity.name.section.group.regexp.coffee}
        '5': {name: punctuation.definition.group.capture.regexp.coffee}
        '6': {name: punctuation.definition.group.no-capture.regexp.coffee}
      end: (\))
      endCaptures:
        '1': {name: punctuation.definition.group.regexp.coffee}
      name: meta.group.regexp.coffee
      patterns:
      - {include: '#regexp_inner'}
    - {include: '#regexp_character_class'}

  regexp_character_class:
    patterns:
    - {match: '\\[wWsSdDhH]|\.', name: constant.character.regexp_character_class.regexp.coffee}
    - {match: \\., name: constant.character.escape.backslash.regexp.coffee}
    - begin: (\[)(\^)?
      beginCaptures:
        '1': {name: punctuation.definition.regexp_character_class.regexp.coffee}
        '2': {name: keyword.operator.negation.regexp.coffee}
      end: (\])
      endCaptures:
        '1': {name: punctuation.definition.regexp_character_class.regexp.coffee}
      name: constant.other.regexp_character_class.set.regexp.coffee
      patterns:
      - {include: '#regexp_character_class'}
      - captures:
          '2': {name: constant.character.escape.backslash.regexp.coffee}
          '4': {name: constant.character.escape.backslash.regexp.coffee}
        match: ((\\.)|.)\-((\\.)|[^\]])
        name: constant.other.regexp_character_class.range.regexp.coffee
firstLineMatch: ^#!.*\bcoffee
foldingStartMarker: ^\s*class\s+\S.*$|.*(->|=>)\s*$|.*[\[{]\s*$
foldingStopMarker: ^\s*$|^\s*[}\]]\s*$
keyEquivalent: ^~C
